node {
      def server = Artifactory.server('saran.jfrog.io')
      def buildInfo = Artifactory.newBuildInfo()
      def rtMaven = Artifactory.newMavenBuild()
   stage('Code Checkout') { // for display purposes
      // Get some code from a GitHub repository
    git credentialsId: '2e401477-6a37-4f80-af9e-c7d19b68a711', url: 'https://github.com/snasina/mavenorg.git'

   }
   stage('Build') {
     withMaven(jdk: 'jdk8', maven: 'maven') {
       sh 'mvn clean compile'
     }
   }
   stage('Unit Test') {
     //withMaven(jdk: 'jdk8', maven: 'maven') {
       //sh 'mvn test'
         rtMaven.tool = 'apache-maven-3.5.2' // Tool name from Jenkins configuration
        rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean test'
     }
   }
   stage ('Maven Analysis'){
   withSonarQubeEnv {
     //sh 'mvn clean org.sonarsource.scanner.maven:sonar-maven-plugin:5.3:sonar'
       //sh "${scannerHome}/bin/sonar-scanner"
  }
   }
   stage('SonarQube Analysis') {
      //def job = build job: 'SonarJob'
      //withSonarQubeEnv("SonarQube") {
      //}
      withMaven(jdk: 'jdk8', maven: 'maven') {
          sh ' mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar ' +
             ' -Dsonar.host.url=https://sonarcloud.io ' +
             ' -Dsonar.organization=saran2250-github '+ 
             ' -Dsonar.login=2131187b401afba5b86667689e3ef316eecad948 '
          }
      }
   
   stage ('Artifactory configuration') {
        // Obtain an Artifactory server instance, defined in Jenkins --> Manage..:
         
        rtMaven.tool = 'apache-maven-3.5.2' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
        rtMaven.deployer.deployArtifacts = false // Disable artifacts deployment during Maven run
     }
   
    //stage("Quality Gate"){
          //timeout(time: 1, unit: 'HOURS') {
             // def qg = waitForQualityGate()
              //if (qg.status != 'OK') {
                //  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              //}
         // }
     // }
   
    stage('Archival') {
      withMaven(jdk: 'jdk8', maven: 'maven') {
       //sh 'mvn package'
     }
   }
     stage('Deploy to Artifactory Repo') {
        rtMaven.run pom: 'maven-example/pom.xml', goals: 'install', buildInfo: buildInfo
     }

   
    stage('Deploy to Dev') {
       rtMaven.deployer.deployArtifacts buildInfo
      
   }
   stage('Publish build info') {
      server.publishBuildInfo buildInfo
      
   }

    
}
